import back.Matrix;
import back.Solver;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.util.InputMismatchException;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 * @author mlgni
 */
public class menu extends javax.swing.JFrame {

    /**
     * Creates new form menu
     */
    public menu() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        matrixATab = new javax.swing.JPanel();
        matrixAScrollPane = new javax.swing.JScrollPane();
        matrixA = new javax.swing.JTable();
        matrixAApplySize = new javax.swing.JButton();
        matrixARowsSpinner = new javax.swing.JSpinner();
        matrixAColumnsSpinner = new javax.swing.JSpinner();
        jLabel1 = new javax.swing.JLabel();
        matrixBTab = new javax.swing.JPanel();
        matrixBScrollPane = new javax.swing.JScrollPane();
        matrixB = new javax.swing.JTable();
        matrixBApplySize = new javax.swing.JButton();
        matrixBRowsSpinner = new javax.swing.JSpinner();
        matrixBColumnsSpinner = new javax.swing.JSpinner();
        jLabel2 = new javax.swing.JLabel();
        resultsTab = new javax.swing.JPanel();
        resultsScrollPane = new javax.swing.JScrollPane();
        matrixResults = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        solutionText = new javax.swing.JTextArea();
        operationNameComboBox = new javax.swing.JComboBox<>();
        calculateButton = new javax.swing.JButton();
        resultsMatrixSizeLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        matrixA.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null}
                },
                new String[]{
                        "Title 1", "Title 2", "Title 3", "Title 4"
                }
        ));
        matrixAScrollPane.setViewportView(matrixA);

        matrixAApplySize.setText("Применить");
        matrixAApplySize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                matrixAApplySizeActionPerformed(evt);
            }
        });

        matrixARowsSpinner.setToolTipText("Количество строк в матрице");

        matrixAColumnsSpinner.setToolTipText("Количество столбцов в матрице");

        jLabel1.setText("X");

        javax.swing.GroupLayout matrixATabLayout = new javax.swing.GroupLayout(matrixATab);
        matrixATab.setLayout(matrixATabLayout);
        matrixATabLayout.setHorizontalGroup(
                matrixATabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(matrixATabLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(matrixATabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(matrixAScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 617, Short.MAX_VALUE)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, matrixATabLayout.createSequentialGroup()
                                                .addComponent(matrixARowsSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(jLabel1)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(matrixAColumnsSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(matrixAApplySize)
                                                .addGap(0, 0, Short.MAX_VALUE)))
                                .addContainerGap())
        );
        matrixATabLayout.setVerticalGroup(
                matrixATabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(matrixATabLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(matrixAScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(matrixATabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(matrixAApplySize)
                                        .addComponent(matrixARowsSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel1)
                                        .addComponent(matrixAColumnsSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Матрица A", matrixATab);

        matrixB.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null}
                },
                new String[]{
                        "Title 1", "Title 2", "Title 3", "Title 4"
                }
        ));
        matrixBScrollPane.setViewportView(matrixB);

        matrixBApplySize.setText("Применить");
        matrixBApplySize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                matrixBApplySizeActionPerformed(evt);
            }
        });

        matrixBRowsSpinner.setToolTipText("Количество строк в матрице");

        matrixBColumnsSpinner.setToolTipText("Количество столбцов в матрице");

        jLabel2.setText("X");

        javax.swing.GroupLayout matrixBTabLayout = new javax.swing.GroupLayout(matrixBTab);
        matrixBTab.setLayout(matrixBTabLayout);
        matrixBTabLayout.setHorizontalGroup(
                matrixBTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(matrixBTabLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(matrixBTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(matrixBScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 617, Short.MAX_VALUE)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, matrixBTabLayout.createSequentialGroup()
                                                .addComponent(matrixBRowsSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(jLabel2)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(matrixBColumnsSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(matrixBApplySize)
                                                .addGap(0, 0, Short.MAX_VALUE)))
                                .addContainerGap())
        );
        matrixBTabLayout.setVerticalGroup(
                matrixBTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(matrixBTabLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(matrixBScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(matrixBTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(matrixBApplySize)
                                        .addComponent(matrixBRowsSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel2)
                                        .addComponent(matrixBColumnsSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Матрица B", matrixBTab);

        matrixResults.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null}
                },
                new String[]{
                        "Title 1", "Title 2", "Title 3", "Title 4"
                }
        ));
        resultsScrollPane.setViewportView(matrixResults);

        solutionText.setColumns(20);
        solutionText.setRows(5);
        jScrollPane1.setViewportView(solutionText);

        operationNameComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[]{"cross", "dot", "prod"}));
        operationNameComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                operationNameComboBoxActionPerformed(evt);
            }
        });

        calculateButton.setText("Расчитать");
        calculateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calculateButtonActionPerformed(evt);
            }
        });

        resultsMatrixSizeLabel.setText("M x M");

        javax.swing.GroupLayout resultsTabLayout = new javax.swing.GroupLayout(resultsTab);
        resultsTab.setLayout(resultsTabLayout);
        resultsTabLayout.setHorizontalGroup(
                resultsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(resultsTabLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(resultsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(resultsScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 617, Short.MAX_VALUE)
                                        .addGroup(resultsTabLayout.createSequentialGroup()
                                                .addComponent(operationNameComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(calculateButton)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(resultsMatrixSizeLabel))
                                        .addComponent(jScrollPane1))
                                .addContainerGap())
        );
        resultsTabLayout.setVerticalGroup(
                resultsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(resultsTabLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(resultsScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 359, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(resultsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(resultsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(calculateButton)
                                                .addComponent(resultsMatrixSizeLabel))
                                        .addComponent(operationNameComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE)
                                .addContainerGap())
        );

        jTabbedPane1.addTab("Результат", resultsTab);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jTabbedPane1)
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jTabbedPane1)
                                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Отрисовывает матрицу в компонент таблицы
     *
     * @param tableComponent компонент таблицы, в которую будет отрисована матрица
     * @param matrix         матрица, которая будет отрисована в таблице
     */
    void drawMatrix(JTable tableComponent, Matrix matrix) {
        tableComponent.clearSelection();
        DefaultTableModel model = (DefaultTableModel) tableComponent.getModel();

        model.setRowCount(0);
        model.setColumnCount(0);

        model.setRowCount(matrix.getRowCount());
        model.setColumnCount(matrix.getColumnCount());

        for (int row = 0; row < matrix.getRowCount(); row++) {
            for (int col = 0; col < matrix.getColumnCount(); col++) {
                double value = matrix.getElementAt(row, col);
                model.setValueAt(value, row, col);
            }
        }
    }

    /**
     * Считывает размеры матрицы из текстовых полей
     *
     * @param rowsSpinner    спинер с количеством строк
     * @param columnsSpinner спинер с количеством столбцов
     * @return Массив из двух целочисленных элементов [строки, столбцы]
     * @throws NumberFormatException - если не удалось преобразовать значение поля к числу
     */
    int[] getMatrixDims(JSpinner rowsSpinner, JSpinner columnsSpinner) throws NumberFormatException {
        int rows = 0, cols = 0;
        rows = Integer.parseInt(rowsSpinner.getValue().toString());
        cols = Integer.parseInt(columnsSpinner.getValue().toString());
        return new int[]{rows, cols};
    }

    /**
     * Преобразует данные из таблицы в объект матрицы
     *
     * @param tableComponent компонент таблицы, содержащий данные для преобразования
     * @return объект матрицы, созданный на основе данных из таблицы
     * @throws NumberFormatException c указанием строки и столбца
     *                               если не удалось преобразовать элемент таблицы в число
     */
    public Matrix parseMatrix(JTable tableComponent) throws NumberFormatException {
        DefaultTableModel model = (DefaultTableModel) tableComponent.getModel();
        Matrix parsed = new Matrix(model.getRowCount(), model.getColumnCount());

        for (int row = 0; row < parsed.getRowCount(); row++) {
            for (int col = 0; col < parsed.getColumnCount(); col++) {
                String cellData = model.getValueAt(row, col).toString();
                try {
                    double value = Double.parseDouble(cellData);
                    parsed.setElementAt(row, col, value);
                } catch (NumberFormatException e) {
                    String message = String.format(
                            "Неудалось преобразовать элемент (%d строка ,%d столбец ) к числу", row + 1, col + 1);
                    throw new NumberFormatException(message);
                }
            }
        }

        return parsed;
    }

    /**
     * По нажатии на кнопку отрисовывает матрицу A размером заданным
     * в полях matrixARowsSpinner и matrixAColumnsSpinner
     */
    private void matrixAApplySizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_matrixAApplySizeActionPerformed
        int[] dims;

        try {
            dims = getMatrixDims(matrixARowsSpinner, matrixAColumnsSpinner);
        } catch (NumberFormatException ex) {
            showErrorDialog("Количество строк и столбцов матрицы A должно быть числом",
                    "Неверный размер матрицы");
            return;
        }

        int rowsCount = dims[0], colsCount = dims[1];
        if (rowsCount <= 0 || colsCount <= 0) {
            showErrorDialog("Количество строк и столбцов матрицы A должно быть положительным",
                    "Неверный размер матрицы");
            return;
        }

        drawMatrix(matrixA, new Matrix(rowsCount, colsCount));
    }//GEN-LAST:event_matrixAApplySizeActionPerformed

    /**
     * По нажатии на кнопку отрисовывает матрицу B размером заданным
     * в полях matrixBRowsSpinner и matrixBColumnsSpinner
     */
    private void matrixBApplySizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_matrixBApplySizeActionPerformed
        int[] dims;

        try {
            dims = getMatrixDims(matrixBRowsSpinner, matrixBColumnsSpinner);
        } catch (NumberFormatException ex) {
            showErrorDialog(
                    "Количество строк и столбцов матрицы B должно быть числом",
                    "Неверный размер матрицы");
            return;
        }

        int rowsCount = dims[0], colsCount = dims[1];
        if (rowsCount <= 0 || colsCount <= 0) {
            showErrorDialog(
                    "Количество строк и столбцов матрицы B должно быть положительным",
                    "Неверный размер матрицы");
            return;
        }

        drawMatrix(matrixB, new Matrix(rowsCount, colsCount));

    }//GEN-LAST:event_matrixBApplySizeActionPerformed

    private void operationNameComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_operationNameComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_operationNameComboBoxActionPerformed

    private void showErrorDialog(String message, String title) {
        JOptionPane.showMessageDialog(this, message, title, JOptionPane.ERROR_MESSAGE);
    }

    private void calculateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calculateButtonActionPerformed
        Matrix matrixA, matrixB;

        try {
            matrixA = parseMatrix(this.matrixA);
        } catch (NumberFormatException ex) {
            showErrorDialog(ex.getMessage(), "Ошибка в матрице A");
            return;
        }

        try {
            matrixB = parseMatrix(this.matrixB);
        } catch (NumberFormatException ex) {
            showErrorDialog(ex.getMessage(), "Ошибка в матрице B");
            return;
        }

        Solver.Solution solution;
        Solver solver = new Solver();

        try {
            int selectedIndex = operationNameComboBox.getSelectedIndex();
            if (selectedIndex == 0) {
                // cross product
                solution = solver.calculateCrossProduct(matrixA, matrixB);
            } else if (selectedIndex == 1) {
                // dot product
                solution = solver.calculateDotProduct(matrixA, matrixB);
            } else if (selectedIndex == 2) {
                // matrix product
                solution = solver.calculateProduct(matrixA, matrixB);
            } else {
                throw new InputMismatchException("Неизвестная операция");
            }
        } catch (InputMismatchException ex) {
            showErrorDialog(ex.getMessage(), "Ошибка при выполнении операции");
            return;
        }

        Matrix solutionMatrix = solution.getMatrix();
        String dimsLabel = String.format("%d x %d",
                solutionMatrix.getRowCount(), solutionMatrix.getColumnCount());

        drawMatrix(this.matrixResults, solutionMatrix);
        resultsMatrixSizeLabel.setText(dimsLabel);
        solutionText.setText(solution.getText());
    }//GEN-LAST:event_calculateButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new menu().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton calculateButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable matrixA;
    private javax.swing.JButton matrixAApplySize;
    private javax.swing.JSpinner matrixAColumnsSpinner;
    private javax.swing.JSpinner matrixARowsSpinner;
    private javax.swing.JScrollPane matrixAScrollPane;
    private javax.swing.JPanel matrixATab;
    private javax.swing.JTable matrixB;
    private javax.swing.JButton matrixBApplySize;
    private javax.swing.JSpinner matrixBColumnsSpinner;
    private javax.swing.JSpinner matrixBRowsSpinner;
    private javax.swing.JScrollPane matrixBScrollPane;
    private javax.swing.JPanel matrixBTab;
    private javax.swing.JTable matrixResults;
    private javax.swing.JComboBox<String> operationNameComboBox;
    private javax.swing.JLabel resultsMatrixSizeLabel;
    private javax.swing.JScrollPane resultsScrollPane;
    private javax.swing.JPanel resultsTab;
    private javax.swing.JTextArea solutionText;
    // End of variables declaration//GEN-END:variables
}
